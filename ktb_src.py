# -*- coding: utf-8 -*-
"""doc_gen_and_eval_with_context_extention.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O-79_zEUrPIRqAb6sCMyZ7TYYgISdPj6

**install packages**
"""
from ktb_prompts import *
from ktb_settings import *
from ktb_readme import *
from ktb_chatbot import *
from ktb_docs import *
from ktb_func import *

"""**MAIN**"""
if __name__ == "__main__":
    start_time = time.perf_counter()

    #repo_url = "https://github.com/kakaotech-25/moheng.git"
    repo_url = "https://github.com/spring-projects/spring-boot.git"
    #repo_url = "https://github.com/spring-projects/spring-petclinic.git"
    clone_dir, output_directory, repo_name = parse_repo_url(repo_url)
    
    if clone_git_repo(repo_url, clone_dir):
        print("리포지토리 클론 또는 갱신 성공!")
    else:
        print("리포지토리 작업 실패.")
        exit(1)
    # 자바 파일 목록 가져오기
    java_files = file_list(clone_dir)

    # 메인 실행 부분
    directory_path = check_service_annotation(java_files)
    end_time = time.perf_counter()
    print(f"총 소요 시간: {end_time - start_time} 초")

    asyncio.run(generate_docs_async(directory_path, output_directory))
    end_time = time.perf_counter()
    print(f"총 소요 시간: {end_time - start_time} 초")

    asyncio.run(summarize_docs_async(output_directory))
    end_time = time.perf_counter()
    print(f"총 소요 시간: {end_time - start_time} 초")
    

    readme_content = asyncio.run(generate_readme(repo_url, clone_dir, max_tokens = MAX_TOKEN_LENGTH))
    usage_content = asyncio.run(generate_usage(repo_url, clone_dir, max_tokens = MAX_TOKEN_LENGTH))

    print(type(readme_content))
    print(type(usage_content))
    final_content = update_readme_with_usage(readme_content, usage_content)

    readme_file_path = clone_dir+"/"+"README.md"
    
    if final_content:
        with open(readme_file_path, "w", encoding="utf-8") as f:
            f.write(final_content)
        print("README.md가 성공적으로 생성되었습니다.")
    else:
        print("README.md 생성에 실패했습니다.")
    end_time = time.perf_counter()
    print(f"총 소요 시간: {end_time - start_time} 초")

    description = read_description_from_readme(readme_file_path)
    image_url, image_path = generate_image(description, clone_dir)
    update_readme_with_image(file_path=readme_file_path, image_path=image_path)
    print("README.md 파일에 이미지가 추가되었습니다.")

    end_time = time.perf_counter()
    print(f"총 소요 시간: {end_time - start_time} 초")
    
    try:
        
        doc_count = add_data_to_db(repo_name, output_directory)
        print(f"Added {doc_count} chunks to the database\n")
        
        # Search and generate response
        query = "How PlannerService works?"
        response = codebase_chat(query, repo_url)
        print("\nQuery : ", query)
        print("\n\nResponse : ")
        for chunk in response:
            print(chunk, end="")

    except Exception as e:
        logger.error(f"Error in main execution: {str(e)}")